# CMakeLists.txt for juce_global_hotkeys module

# This CMakeLists.txt file demonstrates how to integrate the juce_global_hotkeys module
# into a JUCE project using CMake.

cmake_minimum_required(VERSION 3.15)

# If you're using this as part of a larger JUCE project, make sure juce_global_hotkeys
# is available in your modules path and add it to your target:

# Example usage in your main CMakeLists.txt:
#
# project(YourAppName VERSION 1.0.0)
# 
# # Find JUCE
# find_package(JUCE CONFIG REQUIRED)
# 
# # Create your application target
# juce_add_gui_app(YourAppName
#     PRODUCT_NAME "Your App Name"
#     VERSION 1.0.0)
# 
# # Link required JUCE modules including juce_global_hotkeys
# target_link_libraries(YourAppName
#     PRIVATE
#         juce::juce_core
#         juce::juce_events  
#         juce::juce_graphics
#         juce::juce_gui_basics
#         juce::juce_global_hotkeys  # Add this line
#     PUBLIC
#         juce::juce_recommended_config_flags
#         juce::juce_recommended_lto_flags
#         juce::juce_recommended_warning_flags)
# 
# # Set your source files
# target_sources(YourAppName
#     PRIVATE
#         Source/Main.cpp
#         Source/MainComponent.cpp
#         Source/MainComponent.h)
# 
# # Platform-specific settings
# if(APPLE)
#     # For macOS, you might need to add entitlements for Input Monitoring
#     set_target_properties(YourAppName PROPERTIES
#         MACOSX_BUNDLE_INFO_PLIST "${CMAKE_CURRENT_SOURCE_DIR}/Info.plist")
# endif()
# 
# if(WIN32)
#     # Windows-specific settings if needed
#     # No special permissions required for Windows
# endif()

# Module definition (this would be auto-generated by JUCE when the module is properly integrated)
# Don't include this in your actual project - it's for reference only

# Platform-specific source files
set(JUCE_GLOBAL_HOTKEYS_SOURCES
    juce_global_hotkeys.h
    juce_global_hotkeys.cpp
    juce_global_hotkeys.mm
    hotkeys/juce_GlobalHotKey.h
    hotkeys/juce_GlobalHotKey.cpp
    hotkeys/juce_GlobalHotKeyManager.h
    hotkeys/juce_GlobalHotKeyManager.cpp
    hotkeys/juce_KeyCode.h
    hotkeys/juce_KeyCode.cpp
    hotkeys/juce_ModifierKeys.h
    hotkeys/juce_ModifierKeys.cpp)

# Platform-specific implementations
if(WIN32)
    list(APPEND JUCE_GLOBAL_HOTKEYS_SOURCES
        native/juce_GlobalHotKey_windows.h
        native/juce_GlobalHotKey_windows.cpp)
endif()

if(APPLE)
    list(APPEND JUCE_GLOBAL_HOTKEYS_SOURCES
        native/juce_GlobalHotKey_mac.h
        native/juce_GlobalHotKey_mac.cpp
        native/juce_GlobalHotKey_mac.mm)
endif()

if(UNIX AND NOT APPLE)
    list(APPEND JUCE_GLOBAL_HOTKEYS_SOURCES
        native/juce_GlobalHotKey_linux.h
        native/juce_GlobalHotKey_linux.cpp)
endif()

# If building as a standalone test/example
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
    message(STATUS "Building juce_global_hotkeys as standalone example")
    
    # This is just for testing the module structure
    # You would normally use this module as part of a larger JUCE project
    
    project(GlobalHotKeysExample VERSION 1.0.0)
    
    # Add a simple test executable (uncomment if you have JUCE available)
    # find_package(JUCE CONFIG REQUIRED)
    # 
    # juce_add_console_app(GlobalHotKeysTest
    #     PRODUCT_NAME "Global HotKeys Test")
    # 
    # target_sources(GlobalHotKeysTest PRIVATE examples/SimpleExample.h)
    # 
    # target_link_libraries(GlobalHotKeysTest
    #     PRIVATE
    #         juce::juce_core
    #         juce::juce_events
    #         juce::juce_global_hotkeys)
endif() 